* do i even need to use a function template for get_awaiter?

* could i wrap cope::txn::handler(s) in (a) template functor, thus making it easier to
  create aliases, and cleaner to define the input to _task objects? (just include a ())

* don't allow unsupported messages for a particular txn to propagate through
  in the frist place.

* some way to make result_t and result_code share the same formatter (converting constructor? delegating template specialization?)
  * already done?
  
* so the context using "all the bundles" is a bit weird. isn't there a way around this using
  the type-erased coroutine handle?
  * maybe not. because in a triple-nested scenario, you'd have:
    * context<fromA, toB> -- outer
    * context<fromB, toC> -- middle
    * for the start_awaitables anyway. maybe i can fudge my way around that with coro_handle<> ?


* benchmarks:
  * execute a txn, return immediately
  * execute a txn, yield N times, return
  * execute a txn, which executes txn that returns immediately
  * execute a txn, whhich executses txn n times that return immediately

  * with/without std::any
  * with/without std::unique_ptr (including state)
    * small state, large state
    * w and w/o AVX2

* add compiler options (linux especially?)
* support command line -q, -i<iter>
* another example. moving average (temperature?) calc + temp control?
  could have different temp control strategies, slow, medium, fast response
  however, this doesn't really highlight the "nested state" problem
* "query" message.  queries state?
* "update" message.  updates state?
  * both of these could potentially do all of their work from within
    the promise, if the txn is in "ready" state
